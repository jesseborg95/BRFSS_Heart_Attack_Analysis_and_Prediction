knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(include = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(error = FALSE)
# can add quietly=T option to the require() function
loadPkg = function(x) { if (!require(x,character.only=T, quietly =T)) { install.packages(x,dep=T,repos="http://cran.us.r-project.org"); if(!require(x,character.only=T)) stop("Package not found") } }
loadPkg('ggplot2')
loadPkg('dplyr')
loadPkg('plyr')
load("brfss2013.RData")
keeps <- c('X_state', 'imonth', 'genhlth', 'menthlth', 'hlthpln1', 'sleptim1', 'bphigh4', 'bpmeds', 'cholchk', 'cvdinfr4', 'cvdcrhd4', 'cvdstrk3', 'asthma3', 'asthnow', 'addepev2', 'chckidny', 'diabete3', 'veteran3', 'marital', 'educa', 'employ1', 'income2', 'weight2', 'sex', 'pregnant', 'diffwalk', 'smoke100', 'smokday2', 'stopsmk2', 'usenow3', 'alcday5', 'avedrnk2', 'drnk3ge5', 'fruit1', 'fvgreen', 'exerany2', 'prediab1', 'qlmentl2', 'qlstres2', 'drvisits', 'ssbsugar', 'cvdasprn', 'scntwrk1')
brfss_reduced <- brfss2013[keeps]
new_names <- c('state', 'month', 'gen_health', 'mental_health', 'health_coverage', 'sleep_time', 'high_bp', 'bp_meds', 'time_since_cholcheck', 'heart_attack', 'angina', 'stroke', 'asthma', 'has_asthma_now', 'depression', 'kidney_disease', 'diabetes', 'veteran', 'marital_status', 'education_level', 'employment_status', 'income', 'weight', 'sex', 'pregnant', 'difficulty_walk', 'smoke_100', 'freq_smoke', 'stop_smoke_year', 'smokeless_tabac', 'alc_past_30', 'alc_perday_30', 'binge_alc', 'fruit_freq', 'green_veg_freq', 'exercise_30', 'prediabetes', 'depressed_30', 'anxious_30', 'dr_visits_year', 'soda_freq', 'aspirin_daily', 'work_hours_week')
names(brfss_reduced) <- new_names
missing_vals <- colSums(is.na(brfss_reduced))
sort(missing_vals)
brfss_reduced_drops <- subset(brfss_reduced, select = -c(dr_visits_year, prediabetes, binge_alc, alc_perday_30, freq_smoke, bp_meds, aspirin_daily, soda_freq, pregnant, stop_smoke_year, has_asthma_now, work_hours_week, depressed_30, anxious_30))
brfss_complete <- na.omit(brfss_reduced_drops)
str(brfss_complete)
levels(brfss_complete$high_bp)
levels(brfss_complete$employment_status)
levels(brfss_complete$smokeless_tabac)
levels(brfss_complete$diabetes)
levels(brfss_complete$health_coverage)[levels(brfss_complete$health_coverage) == 'Yes'] <- 1
levels(brfss_complete$health_coverage)[levels(brfss_complete$health_coverage) == 'No'] <- 0
levels(brfss_complete$heart_attack)[levels(brfss_complete$heart_attack) == 'Yes'] <- 1
levels(brfss_complete$heart_attack)[levels(brfss_complete$heart_attack) == 'No'] <- 0
levels(brfss_complete$angina)[levels(brfss_complete$angina) == 'Yes'] <- 1
levels(brfss_complete$angina)[levels(brfss_complete$angina) == 'No'] <- 0
levels(brfss_complete$stroke)[levels(brfss_complete$stroke) == 'Yes'] <- 1
levels(brfss_complete$stroke)[levels(brfss_complete$stroke) == 'No'] <- 0
levels(brfss_complete$asthma)[levels(brfss_complete$asthma) == 'Yes'] <- 1
levels(brfss_complete$asthma)[levels(brfss_complete$asthma) == 'No'] <- 0
levels(brfss_complete$depression)[levels(brfss_complete$depression) == 'Yes'] <- 1
levels(brfss_complete$depression)[levels(brfss_complete$depression) == 'No'] <- 0
levels(brfss_complete$kidney_disease)[levels(brfss_complete$kidney_disease) == 'Yes'] <- 1
levels(brfss_complete$kidney_disease)[levels(brfss_complete$kidney_disease) == 'No'] <- 0
levels(brfss_complete$veteran)[levels(brfss_complete$veteran) == 'Yes'] <- 1
levels(brfss_complete$veteran)[levels(brfss_complete$veteran) == 'No'] <- 0
levels(brfss_complete$difficulty_walk)[levels(brfss_complete$difficulty_walk) == 'Yes'] <- 1
levels(brfss_complete$difficulty_walk)[levels(brfss_complete$difficulty_walk) == 'No'] <- 0
levels(brfss_complete$smoke_100)[levels(brfss_complete$smoke_100) == 'Yes'] <- 1
levels(brfss_complete$smoke_100)[levels(brfss_complete$smoke_100) == 'No'] <- 0
levels(brfss_complete$exercise_30)[levels(brfss_complete$exercise_30) == 'Yes'] <- 1
levels(brfss_complete$exercise_30)[levels(brfss_complete$exercise_30) == 'No'] <- 0
levels(brfss_complete$diabetes)[levels(brfss_complete$diabetes) == "Yes, but female told only during pregnancy"] <- 1
levels(brfss_complete$diabetes)[levels(brfss_complete$diabetes) == "No, pre-diabetes or borderline diabetes"  ] <- 0
levels(brfss_complete$diabetes)[levels(brfss_complete$diabetes) == 'Yes'] <- 1
levels(brfss_complete$diabetes)[levels(brfss_complete$diabetes) == 'No'] <- 0
levels(brfss_complete$high_bp)[levels(brfss_complete$high_bp) == "Yes, but female told only during pregnancy"] <- 1
levels(brfss_complete$high_bp)[levels(brfss_complete$high_bp) == "Told borderline or pre-hypertensive" ] <- 1
levels(brfss_complete$high_bp)[levels(brfss_complete$high_bp) == 'Yes'] <- 1
levels(brfss_complete$high_bp)[levels(brfss_complete$high_bp) == 'No'] <- 0
levels(brfss_complete$employment_status)[levels(brfss_complete$employment_status) == "Employed for wages" ] <- 'Employed'
levels(brfss_complete$employment_status)[levels(brfss_complete$employment_status) == "Out of work for 1 year or more" ] <- 'Unemployed'
levels(brfss_complete$employment_status)[levels(brfss_complete$employment_status) == "Out of work for less than 1 year" ] <- 'Unemployed'
levels(brfss_complete$smokeless_tabac)[levels(brfss_complete$smokeless_tabac) == "Every day" ] <- 1
levels(brfss_complete$smokeless_tabac)[levels(brfss_complete$smokeless_tabac) == "Some days" ] <- 1
levels(brfss_complete$smokeless_tabac)[levels(brfss_complete$smokeless_tabac) == "Not at all" ] <- 0
str(brfss_complete)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(include = F)
# can add quietly=T option to the require() function
loadPkg = function(x) { if (!require(x,character.only=T, quietly =T)) { install.packages(x,dep=T,repos="http://cran.us.r-project.org"); if(!require(x,character.only=T)) stop("Package not found") } }
loadPkg("gmodels")
loadPkg("FNN")
loadPkg("ggplot2")
# import dataset
Adata <- read.csv('LogReg.csv')
# check for missing values
missingvalues <- colSums(is.na(Adata))
missingvalues
# convert admit and rank to factor variables
Adata$admit = as.factor(Adata$admit)
head(Adata)
# scale the gre and gpa data so KNN will operate correctly
scaledAdata <- as.data.frame(scale(Adata[2:4], center = TRUE, scale = TRUE))
head(scaledAdata)
# create sample for training and test sets
set.seed(1)
Adata_sample <- sample(2, nrow(scaledAdata), replace=TRUE, prob=c(0.70, 0.30))
# split data into training and testing sets
x_train <- scaledAdata[Adata_sample==1, 1:3]
x_test <- scaledAdata[Adata_sample==2, 1:3]
str(x_train)
str(x_test)
# create and split Y labels (admit) into training and testing sets
y_train <- Adata[Adata_sample==1, 1]
y_test <- Adata[Adata_sample==2, 1]
str(y_train)
str(y_test)
# build first KNN model with k = 3
admit_pred1 <- knn(train = x_train, test = x_test, cl=y_train, k=3)
AdmitPredCross1 <- CrossTable(y_test, admit_pred1, prop.chisq = FALSE)
# build second KNN model with k = 5
admit_pred2 <- knn(train = x_train, test = x_test, cl=y_train, k=5)
AdmitPredCross2 <- CrossTable(y_test, admit_pred2, prop.chisq = FALSE)
# build third KNN model with k = 7
admit_pred3 <- knn(train = x_train, test = x_test, cl=y_train, k=7)
AdmitPredCross3 <- CrossTable(y_test, admit_pred3, prop.chisq = FALSE)
# compute and compare accuracies for the different models with different k values
compareK = function(k, x_train, x_test, y_train, y_test){
# Build knn with k neighbors considered.
set.seed(1)
KNN_res = knn(train = x_train, test = x_test, cl = y_train,k = k)
result = table(KNN_res, y_test)
# Calculate the accuracy.
accu = sum(result[row(result) == col(result)]) / sum(result)
cbind(k = k, accuracy = accu)
}
computeAccuracies = sapply(seq(3, 7, by = 2), function(x) compareK(x, x_train = x_train,
x_test = x_test,
y_train = y_train,
y_test = y_test))
# import results into a dataframe
computeAccuracies = data.frame(k = computeAccuracies[1,],
accuracy = computeAccuracies[2,])
ggplot(computeAccuracies, aes(x = k, y = accuracy)) +
geom_line(color = "blue", size = 1.5) +
geom_point(size = 3)
